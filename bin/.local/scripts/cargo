#!/usr/bin/env bash

# Function to find the nearest directory containing any docker-compose*.yml files
find_project_dir() {
  local dir=$(pwd)
  while [[ "$dir" != "/" ]]; do
    if ls "$dir"/docker-compose*.yml >/dev/null 2>&1; then
      echo "$dir"
      return
    fi
    dir=$(dirname "$dir")
  done
  echo ""
}

# Find the project directory
PROJECT_DIR=$(find_project_dir)

if [[ -z "$PROJECT_DIR" ]]; then
  echo "Error: No directory with docker-compose*.yml found in the current or parent directories."
  exit 1
fi

# Change to the project directory
cd "$PROJECT_DIR"

# Gather all docker-compose*.yml files
COMPOSE_FILES=()
for file in docker-compose*.yml; do
  # Check if the file exists and is a regular file
  if [[ -f "$file" ]]; then
    COMPOSE_FILES+=("-f" "$file")
  fi
done

if [[ ${#COMPOSE_FILES[@]} -eq 0 ]]; then
  echo "Error: No docker-compose*.yml files found in $PROJECT_DIR."
  exit 1
fi

# Extract service names that include 'rust' (case-insensitive)
SERVICE_NAMES=$(docker compose "${COMPOSE_FILES[@]}" config --services | grep -i rust)

if [[ -z "$SERVICE_NAMES" ]]; then
  echo "Error: No Docker service with 'rust' found in the docker-compose*.yml files."
  exit 1
fi

# Handle multiple Rust services
if [[ $(echo "$SERVICE_NAMES" | wc -l) -gt 1 ]]; then
  echo "Multiple Rust services found:"
  select SERVICE_NAME in $SERVICE_NAMES; do
    if [[ -n "$SERVICE_NAME" ]]; then
      break
    else
      echo "Invalid selection. Please try again."
    fi
  done
else
  SERVICE_NAME="$SERVICE_NAMES"
fi

# Check if the container for the selected service is already running
CONTAINER_EXISTS=$(docker compose "${COMPOSE_FILES[@]}" ps -q "$SERVICE_NAME")
if [[ -z "$CONTAINER_EXISTS" ]]; then
  # Start the service in detached mode if it's not running
  docker compose "${COMPOSE_FILES[@]}" up -d "$SERVICE_NAME"
fi

# Execute the cargo command inside the running container
docker compose "${COMPOSE_FILES[@]}" exec "$SERVICE_NAME" cargo "$@"

