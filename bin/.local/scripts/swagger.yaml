openapi: 3.0.1
info:
  title: Bohnenbank API
  description: API for handling coffee requests and user-to-user transactions
  version: 1.0.0

servers:
  - url: http://localhost:8080

paths:
  /request-coffee:
    post:
      summary: Request a coffee transaction
      operationId: requestCoffee
      requestBody:
        description: Payload to request a coffee (user-to-bank) transaction
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCoffeeBody'
      responses:
        '200':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'

  /user-to-user-transaction:
    post:
      summary: Create a user-to-user transaction
      operationId: userToUserTransaction
      requestBody:
        description: Payload for a user-to-user transaction
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserToUserBody'
      responses:
        '200':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'

components:
  schemas:
    RequestCoffeeBody:
      type: object
      required:
        - apiKey
        - cardId
        - bankId
      properties:
        apiKey:
          type: string
          example: "sk-abc123"
        cardId:
          type: string
          example: "card-456"
        bankId:
          type: string
          example: "bank-789"

    UserToUserBody:
      type: object
      required:
        - senderUserId
        - receiverUserId
        - amount
      properties:
        senderUserId:
          type: string
          example: "user-123"
        receiverUserId:
          type: string
          example: "user-456"
        amount:
          type: integer
          description: Amount in cents
          example: 350

    Transaction:
      type: object
      required:
        - id
        - transactionType
        - senderId
        - receiverId
        - amount
        - transactionTimestamp
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        senderId:
          type: string
          example: "user-123"
        receiverId:
          type: string
          example: "bank-001"
        amount:
          type: integer
          description: Amount in cents
          example: 250
        transactionTimestamp:
          type: string
          format: date-time
          example: "2025-05-28T14:30:00Z"

    TransactionType:
      type: string
      enum:
        - USER_TO_USER
        - USER_TO_BANK
        - PHYSICAL_TO_USER
        - PHYSICAL_TO_BANK
        - USER_TO_PHYSICAL
      description: |
        USER_TO_USER: user pays another user  
        USER_TO_BANK: user pays bank (e.g., for a coffee)  
        PHYSICAL_TO_USER: user adds physical cash to their account  
        PHYSICAL_TO_BANK: admin loads bank with cash  
        USER_TO_PHYSICAL: user withdraws cash from account
